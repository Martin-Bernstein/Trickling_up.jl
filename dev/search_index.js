var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = Trickling_up","category":"page"},{"location":"#Trickling_up","page":"Home","title":"Trickling_up","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for Trickling_up.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [Trickling_up]","category":"page"},{"location":"#Trickling_up.simulate_baseline-NTuple{4, Any}","page":"Home","title":"Trickling_up.simulate_baseline","text":"Simulates a baseline model\n\n\n\n\n\n","category":"method"},{"location":"#Trickling_up.simulate_monetary-NTuple{6, Any}","page":"Home","title":"Trickling_up.simulate_monetary","text":"Extends the model to include a monetary policy response.\n\n\n\n\n\n","category":"method"},{"location":"#Trickling_up.simulate_re-NTuple{4, Any}","page":"Home","title":"Trickling_up.simulate_re","text":"Extends the model to include rational expectations of future income\n\n\n\n\n\n","category":"method"},{"location":"#Trickling_up.solver-Tuple{Any, Any}","page":"Home","title":"Trickling_up.solver","text":"(Very) lightweight solver for linear rational expectations models in continuous time\n\nSuppose our model is given by the linear ODE\n\n[xdot] = [Axx   Axy] [x] [ydot]   [Ayx   Ayy] [y]\n\nwhere x is a predetermined 'state' vector of length N, y is vector of 'jump' variables, and the four blocks A_ form a matrix A. For there to be a unique solution for y given the state x, there must be N stable eigenvalues (i.e. with negative real part) of A.\n\nLet A = QUQ' be the Schur decomposition, where Q is unitary and U is upper triangular. Assuming that this is sorted so that the stable eigenvalues of U are at the top left, we can write.\n\nU = [Uss   Usu]       Q = [Qxs   Qxu]     [0      Uuu]           [Qys   Q_yu]\n\nwhere the N-by-N upper left block Uss maps the stable subspace to itself, the N-by-N Qxs maps the stable subspace to x, etc.\n\nGiven any state x, we can obtain the rotated stable state by solving s = Qxs^(-1)*x. Then sdot = Usss, and finally xdot = Q_xssdot = Qxs*UssQxs^(-1).  The jump variables y can be obtained from s by y = Qyxs = Qyx*Qxs^(-1)*x.\n\nSumming up, our model will have law of motion\n\nxdot = Bx y = Fx\n\nwhere B = Qxs*UssQxs^(-1) and F = QyxQ_xs^(-1).\n\n\n\n\n\n","category":"method"}]
}
